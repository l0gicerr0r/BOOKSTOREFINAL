"""
Django settings for bookstore project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""





# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent

# #deploy


# # BASE_DIR = Path(__file__).resolve().parent.parent

# # Use environment variable for security (update before production)
# # SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-default-key')



# # Temporarily allowing all hosts; update with your EB domain later
# #ALLOWED_HOSTS = ['*']

# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-default-key')
  


# STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
  
# # Add this line to serve static files in development
# ]
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')



# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False

# ALLOWED_HOSTS = ['*']


import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# Use environment variable for security (update before production)
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-default-key')

DEBUG = False

# Temporarily allowing all hosts; update with your EB domain later
ALLOWED_HOSTS = ['*','django-bookstore-env.eba-j447ym2p.us-east-1.elasticbeanstalk.com','8b0882a3b6674827ae56ac12a71c4ad1.vfs.cloud9.us-east-1.amazonaws.com']

# Static files settings
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]


ROOT_URLCONF = 'bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'




# Default primary key field type
# https://docs.djangopfroject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_URL = 'login'

CSRF_TRUSTED_ORIGINS = [
    'https://127.0.0.1:8080', 
    'https://localhost:8080',
    'https://8b0882a3b6674827ae56ac12a71c4ad1.vfs.cloud9.us-east-1.amazonaws.com',
    'http://bookstore-env.eba-bjvbwwt2.us-east-1.elasticbeanstalk.com'
]


# settings.py

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_STORAGE_BUCKET_NAME = 'my-bookstore-bucket'  # Change to your bucket name
AWS_S3_REGION_NAME = 'us-east-1'  # Change to your AWS region
AWS_QUERYSTRING_AUTH = False  # Optional: Makes URLs cleaner


LOGIN_REDIRECT_URL = 'home'




AWS_STORAGE_BUCKET_NAME = "my-bookstore-bucket-12345"
AWS_S3_REGION_NAME = "us-east-1"  # Example: 'us-east-1'
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# Directory for storing book covers in S3
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/book_covers/"



# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.dummy',  # Dummy backend since DynamoDB is not natively supported
#         'NAME': 'dynamodb',                    # You can specify any name here, DynamoDB doesn't need a file-based database
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # You can change to PostgreSQL or MySQL if needed
        'NAME': BASE_DIR / 'db.sqlite3',  # Path to the SQLite database file
    }
}



SECURE_SSL_REDIRECT = False
LOGIN_REDIRECT_URL = '/'



SQS_QUEUE_URL = "https://sqs.us-east-1.amazonaws.com/264987204337/BookBorrowQueue"
DYNAMODB_USERS_TABLE = "Users"
DYNAMODB_BOOKS_TABLE = "Book"
DYNAMODB_BORROW_TABLE = "Borrow"
SNS_TOPIC_ARN = "arn:aws:sns:us-east-1:123456789012:BorrowNotifications"






# # Static files settings
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')




